<?xml version="1.0" encoding="UTF-8"?>
<bs:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:bs="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
	
	<http auto-config="true">
		<intercept-url pattern="/admin/h*" access="hasRole('ROLE_H_ADMIN')"/>
		<intercept-url pattern="/admin/m*" access="hasAnyRole('ROLE_M_ADMIN', 'ROLE_H_ADMIN')"/>
		<intercept-url pattern="/admin/l*" access="hasAnyRole('ROLE_L_ADMIN', 'ROLE_M_ADMIN', 'ROLE_H_ADMIN')"/>
		<intercept-url pattern="/user/**" access="hasAnyRole('ROLE_USER', 'ROLE_L_ADMIN', 'ROLE_M_ADMIN', 'ROLE_H_ADMIN')"/>
		<intercept-url pattern="/home" access="hasAnyRole('ROLE_USER', 'ROLE_L_ADMIN', 'ROLE_M_ADMIN', 'ROLE_H_ADMIN')"/>
		<intercept-url pattern="/**" access="permitAll"/>
		
		<access-denied-handler error-page="/access_denied"/>
		<!-- 
		# access-denied-handler 항목.
			1) error-page
				: 권한이 없는 리소스(url)에 접근하였을 때 보여지는 화면.
				이를 설정하지 않으면 AccessDeniedException이 뜨는 화면을 볼 수 있다.
		 -->
		
		<form-login 
			username-parameter="userid" password-parameter="userpw" 
			login-page="/login" 
			default-target-url="/mypage" 
			authentication-failure-url="/login?fail=true" 
			authentication-success-handler-ref="authSuccessHandler" 
			authentication-failure-handler-ref="authFailureHandler"
			/>
		<!-- 
		# form-login 항목.
			1) always-use-default-target
				: 로그인이 성공 후 무조건 default-target-url 페이지로 이동하는 설정.
				true, false로 값을 설정한다.
				(기본 true, false로 값을 지정할 때 설정한다.)
				만약, 로그인이 성공하면 이전 로그인 접근 페이지나 특정 페이지를
				사용자에게 제공하려면 false로 설정하고 
				authentication-success-handler-ref 에 핸들러를 만들고 
				핸들러에서 이 부분을 구현해야 한다.
				예를 들자면, 관리자 로그인 성공시 각각의 관리자의 역할별로 
				각자 다른 인증 성공 페이지를 제공해야 할 때 등.
				
			2) authentication-details-source-ref
			
			3) authentication-failure-forward-url
			
			4) authentication-failure-handler-ref
				: 로그인 실패 후 부가작업을 진행할 때 담당할 Handler를 설정.
				(로그인 실패 핸들러는 로그인 실패 후 실패 카운트를 저장한다든가, 
				로그인 실패 로그를 쌓는다든가의 일을 할 수 있겠다.)
				만약, 이 핸들러를 적용하게 되면 
				authentication-failure-url 속성은 무시되며
				핸들러에서 직접 이동할 페이지를 지정해야 한다.
				
			5) authentication-failure-url
				: 로그인 실패 후 이동할 URL 설정.
				
			6) authentication-success-forward-url
			
			7) authentication-success-handler-ref
				: 로그인 성공 후 부가작업을 진행할 때 담당할 Handler를 설정.
				(로그인 성공 핸들러는 로그인 성공 후 방문자 수를 추가한다든가, 
				로그인 한 사람의 로그인 기록을 남긴다든가의 일을 할 수 있겠다.)
				만약, 이 핸들러를 적용하게 되면
				default-target-url 속성은 무시되며
				핸들러에서 직접 이동할 페이지를 지정해야 한다.
				
			8) default-target-url
				: 로그인 성공 후 이동할 URL 설정.
				
			9) login-page
				: 로그인 페이지의 주소를 커스터마이징 할 때 설정.
				
			10) login-processing-url
				: 로그인 페이지의 form action 주소를 커스터마이징 할 때 설정.
				그러나, 이 부분은 보여지는 부분일 뿐 실제로 동작하지 않는다.
				실제로는 'j_spring_security_check'로 호출되어 로그인을 처리한다.
				
			11) username-parameter
				: 로그인 페이지 id 이름을 커스터마이징 할 때 설정. 기본 이름은 'j_username'이다.
				커스터마이징 예)
				<input type="text" name="userid">
				
			12) password-parameter
				: 로그인 페이지 password 이름을 커스터마이징 할 때 설정. 기본 이름은 'j_password'이다.
				커스터마이징 예)
				<input type="password" name="userpw">
		-->
		
		<logout invalidate-session="true" logout-success-url="/" logout-url="/logout"/>
		<!-- 
		# logout 항목.
			1) invalidate-session
				: 세션 삭제 여부.
			2) logout-success-url
				: 로그아웃 성공 후 호출될 URL.
			3) logout-url
				: 로그아웃 처리를 요청할 때 사용할 URL.
				보여지는 URL일 뿐 j_spring_security_logout이 호출되어 로그아웃을 처리한다.
			4) delete-cookies
				: 삭제할 쿠키명을 입력한다.
		 -->
	</http>
	
	<bs:bean id="authSuccessHandler" class="net.gongple.gsecu.security.handler.CustomAuthenticationSuccessHandler">
		<bs:property name="targetUrlParameter" value="loginRedirect"/>
		<bs:property name="useReferer" value="false"/>
		<bs:property name="defaultUrl" value="/mypage"/>
	</bs:bean>
	<bs:bean id="authFailureHandler" class="net.gongple.gsecu.security.handler.CustomAuthenticationFailureHandler">
		<bs:property name="loginIdTagName" value="userid"/>
		<bs:property name="loginPwTagName" value="userpw"/>
		<bs:property name="loginRedirectTagName" value="loginRedirect"/>
		<bs:property name="exceptionMsgKey" value="securityExceptionMsg"/>
		<bs:property name="defaultFailureUrl" value="/login?fail=true"/>
	</bs:bean>
	
	<bs:bean id="userDetailsSvc" class="net.gongple.gsecu.security.CustomUserDetailsService"/>
	<bs:bean id="customAuthProvider" class="net.gongple.gsecu.security.CustomAuthenticationProvider"/>
	
	<bs:bean id="bcryptPwEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<authentication-manager>
		<authentication-provider ref="customAuthProvider"/>
		<!-- <authentication-provider user-service-ref="userDetailsSvc"/> -->
		<!-- <authentication-provider>
			<user-service>
				<user name="hadmin" password="1234" authorities="ROLE_H_ADMIN"/>
				<user name="madmin" password="1234" authorities="ROLE_M_ADMIN"/>
				<user name="ladmin" password="1234" authorities="ROLE_L_ADMIN"/>
				<user name="user" password="1234" authorities="ROLE_USER"/>
				<user name="adminuser" password="1234" authorities="ROLE_L_ADMIN, ROLE_USER"/>
			</user-service>
		</authentication-provider> -->
	</authentication-manager>
	
</bs:beans>